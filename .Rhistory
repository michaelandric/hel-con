seq(.05, .20, .05)
seq(.05, .2, .05)
td = 0.05
setwd('~/Documents/workspace/hel/group_similarity/')
library(dplyr)
library(ggplot2)
within1 <- read.table(paste('within_task_sess_1_group.dens_',td,'_nmi.txt', sep=''))$V1
within1
length(within1)
between <- read.table(paste('between_task_sess_2_group.dens_',td,'_nmi.txt', sep=''))$V1
within2 <- read.table(paste('within_task_sess_2_group.dens_',td,'_nmi.txt', sep=''))$V1
summary(within1)
summary(within2)
summary(between)
ks.test(within1, within2)
ks.test(within1, between)
ks.test(within2, between)
sample(within1, 20)
ks.test(sample(within1, 20), sample(within2, 20))
ks.test(sample(within1, 20), sample(within2, 20))
ks.test(sample(within1, 20), sample(between, 20))
within1 <- read.table(paste('within_task_sess_1_group.dens_',td,'_nmi.txt', sep=''))$V1
within2 <- read.table(paste('within_task_sess_2_group.dens_',td,'_nmi.txt', sep=''))$V1
between <- read.table(paste('between_task_sess_2_group.dens_',td,'_nmi.txt', sep=''))$V1
repnames <- c(rep("sess_1", length(within1)), rep("sess_2", length(within2)), rep("between", length(between)))
nm_df <- tbl_df(data.frame(c(within1, within2, between), repnames))
ks.test(sample(within1, 20), sample(between, 20))
ks.test(sample(within1, 20), sample(between, 20))
nm_df
names(nm_df) <- c('NMI', 'Group')
nm_df
print(qplot(NMI, data = nm_df, geom="density", fill=Group, alpha=I(.66), xlim=c(0,1), main=paste("Density ",p*100,"%", sep=""), xlab="Normalized Mutual Information") + theme(panel.background = element_rect(fill="white")) + theme_bw())
print(qplot(NMI, data = nm_df, geom="density", fill=Group, alpha=I(.66), xlim=c(0,1), main=paste("Density ",td*100,"%", sep=""), xlab="Normalized Mutual Information") + theme(panel.background = element_rect(fill="white")) + theme_bw())
setwd('~/Documents/workspace/hel/group_similarity/')
library(dplyr)
library(ggplot2)
pdf('plotting_similarity_nmi.pdf')
for (td in seq(.05, .2, .05))
{
within1 <- read.table(paste('within_task_sess_1_group.dens_',td,'_nmi.txt', sep=''))$V1
within2 <- read.table(paste('within_task_sess_2_group.dens_',td,'_nmi.txt', sep=''))$V1
between <- read.table(paste('between_task_sess_2_group.dens_',td,'_nmi.txt', sep=''))$V1
repnames <- c(rep("sess_1", length(within1)), rep("sess_2", length(within2)), rep("between", length(between)))
nm_df <- tbl_df(data.frame(c(within1, within2, between), repnames))
names(nm_df) <- c('NMI', 'Group')
print(qplot(NMI, data = nm_df, geom="density", fill=Group, alpha=I(.66), xlim=c(0,1), main=paste("Density ",td*100,"%", sep=""), xlab="Normalized Mutual Information") + theme(panel.background = element_rect(fill="white")) + theme_bw())
}
dev.off()
c(seq(1, 20))
c(seq(1, 19))
c(seq(1, 19))
seq(1, 19)[seq(1,19) != 8]
len(seq(1, 19)[seq(1,19) != 8])
length(seq(1, 19)[seq(1,19) != 8])
s_nums = seq(1, 19)[seq(1,19) != 8]
subjects <- c()
s_nums = seq(1, 19)[seq(1,19) != 8]
for (s in s_nums)
{
subjects <- c(subjects, paste('hel', s, sep=''))
}
subjects
len(subjects)
length(subjects)
setwd('~/Documents/workspace/hel/group_modularity/')
library(dplyr)
subjects <- c()
s_nums = seq(1, 19)[seq(1,19) != 8]
for (s in s_nums)
{
subjects <- c(subjects, paste('hel', s, sep=''))
}
conditions <- seq(2)
condition_names = c("A", "B")
thresholds <- c(20, 15, 10, 5)  #These are densities. % of complete graph
subjects
conditions
# --- Doing modularity values ----
dat5 <- read.table('max_q_values_density0.05_array.txt')
dat10 <- read.table('max_q_values_density0.1_array.txt')
dat15 <- read.table('max_q_values_density0.15_array.txt')
dat20 <- read.table('max_q_values_density0.2_array.txt')
dat <- rbind(stack(dat20), stack(dat15), stack(dat10), stack(dat5))$values
dat
length(dat)
18*2
(18*2) * 4
condition_vec <- rep(rep(condition_names, each=length(subjects)), length(thresholds))
subjects_vec <- rep(rep(subjects, length(conditions)), length(thresholds))
thresh_levels <- as.factor(rep(thresholds, each = length(subjects) * length(conditions)))
mod_score_frame <- tbl_df(data.frame(dat, condition_vec, subjects_vec, thresh_levels))
colnames(mod_score_frame) <- c("modularity", "condition", "subject", "thresh")
mod_score_frame
filter(mod_score_frame, thresh='20')
filter(mod_score_frame, thresh=='20')
filter(mod_score_frame, thresh=='20' & condition=='A')
filter(mod_score_frame, thresh=='20' & condition=='A')$modularity
mean(filter(mod_score_frame, thresh=='20' & condition=='A')$modularity)
dat20
colMeans(dat20)
mean(filter(mod_score_frame, thresh=='20' & condition=='A')$modularity)
mean(filter(mod_score_frame, thresh=='20' & condition=='B')$modularity)
stack(dat20)
stack(dat20)[,1]
shapiro.test(stack(dat20)[,1])
shapiro.test(rnorm(36))
shapiro.test(rnorm(36))
shapiro.test(rnorm(36))
length(stack(dat20)[,1])
ks.test(rnorm(36), stack(dat20)[,1])
mean(stack(dat20))
mean(stack(dat20)[,1])
sd(stack(dat20)[,1])
rnorm(36, mean=.26, .03)
sd(rnorm(36, mean=.26, .03))
(rnorm(36, mean=.26, .03))
ks.test((rnorm(36, mean=.26, .03)), stack(dat20)[,1])
ks.test((rnorm(36, mean=.26, .03)), stack(dat20)[,1])
ks.test((rnorm(36, mean=.26, .03)), stack(dat20)[,1])
ks.test((rnorm(36, mean=.26, .03)), stack(dat20*4)[,1])
ks.test((rnorm(36, mean=.26, .03)), stack(dat20*4)[,1])
hist(stack(dat20)[,1])
hist(stack(dat5)[,1])
hist(stack(dat10)[,1])
hist(stack(dat15)[,1])
hist(stack(dat20)[,1])
mod_score_frame
error_vec <- c()
medians_mat <- matrix(nrow = length(thresholds), ncol = length(conditions))
for (t in 1:length(thresholds))
{
medians_mat[t,] <- tapply(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh==thresholds[t]), median)[,2]   # This re-orders to "A, B, C, D" rather than "A, B, D, C"
tmp <- subset(mod_score_frame, mod_score_frame$thresh == thresholds[t])
for (i in conditions)
{
er <- sd(matrix(tmp$modularity, ncol = 4)[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(length(subjects)))
error_vec <- c(error_vec, er)
}
}
error_vec_mat = matrix(error_vec, nrow = length(conditions), byrow = T)
medians_mat
apply(dat20, 2, median)
apply(dat15, 2, median)
apply(dat10, 2, median)
apply(dat5, 2, median)
shapiro.test(stack(dat5)[,1])
shapiro.test(stack(dat10)[,1])
shapiro.test(stack(dat15)[,1])
shapiro.test(stack(dat20)[,1])
shapiro.test(stack(dat20)[,1])
summary(dat5)
mod_score_frame
aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), median)
aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), median)
medians_mat
aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), mean)
matrix(aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), mean)$x, nrow=4)
matrix(aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), mean)$x, nrow=4, byrow=T)
medians_mat
matrix(aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), median)$x, nrow=4, byrow=T)
error_vec
attach(mod_score_frame)
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 2, rev))
ylim <- c(0, 1.01 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
aa
apply(medians_mat, 2, rev)
t(apply(medians_mat, 2, rev))
t(apply(medians_mat, 2, rev)) + aa
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 2, rev))
ylim <- c(0, 1.01 * max(aa + trans_errs))
trans_errs
trans_medians
error_vec_mat
error_vec
trans_errs <- apply(error_vec_mat, 2, rev)
ylim <- c(0, 1.01 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = trans_medians + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
error_vec
tmp
tapply(tmp$modularity, tmp$subject, mean)
sd(matrix(tmp$modularity, ncol = 4)[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(length(subjects)))
error_vec
tmp$modularity
matrix(tmp$modularity, ncol=4)
matrix(tmp$modularity, ncol=2)
matrix(tmp$modularity, ncol=2)[,i]
sd(matrix(tmp$modularity, ncol = 2)[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(length(subjects)))
matrix(tmp$modularity, ncol = 2)
matrix(tmp$modularity, ncol = 2)[,i]
matrix(tmp$modularity, ncol = 2)[,i] - tapply(tmp$modularity, tmp$subject, mean)
length(subjects)
sd(matrix(tmp$modularity, ncol = 2)[,i] - tapply(tmp$modularity, tmp$subject, mean))
sd(matrix(tmp$modularity, ncol = 2)[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(18))
er
matrix(tmp$modularity, ncol = 2)[,i]
tmp
matrix(tmp$modularity, ncol=2)
matrix(tmp$modularity, ncol=2)
er
tapply(tmp$modularity, tmp$subject, mean)
cond_tmp <- matrix(tmp$modularity, ncol = length(conditions))[,i]
tmp_means <- tapply(tmp$modularity, tmp$subject, mean)
num <- sd(cond_tmp - tmp_means)
den <- sqrt(length(subjects))
num / den
er
er <- sd(matrix(tmp$modularity, ncol = length(conditions))[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(length(subjects)))
er
error_vec <- c()
medians_mat <- matrix(nrow = length(thresholds), ncol = length(conditions))
denom <- sqrt(length(subjects))
for (t in 1:length(thresholds))
{
medians_mat[t,] <- tapply(mod_score_frame$modularity,
list(mod_score_frame$condition,
mod_score_frame$thresh==thresholds[t]),
median)[,2]
tmp <- subset(mod_score_frame, mod_score_frame$thresh == thresholds[t])
for (i in conditions)
{
cond_tmp <- matrix(tmp$modularity, ncol = length(conditions))[,i]
tmp_means <- tapply(tmp$modularity, tmp$subject, mean)
num <- sd(cond_tmp - tmp_means)
er <- num / denom
error_vec <- c(error_vec, er)
}
}
error_vec_mat = matrix(error_vec, nrow = length(conditions), byrow = T)
error_vec_mat
t(apply(error_vec_mat, 2, rev))
t(apply(medians_mat, 2, rev))
t(apply(error_vec_mat, 1, rev))
error_vec
medians_mat
aa
error_vec
error_vec_mat
trans_errs
t(apply(error_vec_mat, 2, rev))
t(apply(error_vec_mat, 1, rev))
error_vec_mat
apply(t(error_vec_mat), 1, rev))
apply(t(error_vec_mat), 1, rev)
apply(t(error_vec_mat), 2, rev)
error_vec
apply(error_vec_mat, 2, rev)
aa
apply(error_vec_mat, 1, rev)
t(apply(error_vec_mat, 1, rev))
aa
attach(mod_score_frame)
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 1, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- apply(error_vec_mat, 1, rev)
ylim <- c(0, 1.01 * max(aa + trans_errs))
trans_errs
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 1, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.01 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = trans_medians + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
trans_medians
medians_mat
aa
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = aa + trans_errs)
trans_medians
t(apply(medians_mat, 1, rev))
t(apply(medians_mat, 2, rev))
aa
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.01 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = aa + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
error_vec_mat
error_vec
medians_mat
trans_medians
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.11 * max(aa + trans_errs))
#pdf('max_q_values_barplot_mediansofmax.pdf')
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = aa + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
aa
dat5 <- read.table('max_q_n_mods_density0.05_array.txt')
dat10 <- read.table('max_q_n_mods_density0.1_array.txt')
dat15 <- read.table('max_q_n_mods_density0.15_array.txt')
dat20 <- read.table('max_q_n_mods_density0.2_array.txt')
dat <- rbind(stack(dat20), stack(dat15), stack(dat10), stack(dat5))$values
condition_vec <- rep(rep(condition_names, each=length(subjects)), length(thresholds))
subjects_vec <- rep(rep(subjects, length(conditions)), length(thresholds))
thresh_levels <- as.factor(rep(thresholds, each = length(subjects) * length(conditions)))
mod_score_frame <- tbl_df(data.frame(dat, condition_vec, subjects_vec, thresh_levels))
colnames(mod_score_frame) <- c("modularity", "condition", "subject", "thresh")
error_vec <- c()
medians_mat <- matrix(nrow = length(thresholds), ncol = length(conditions))
denom <- sqrt(length(subjects))
for (t in 1:length(thresholds))
{
medians_mat[t,] <- tapply(mod_score_frame$modularity,
list(mod_score_frame$condition,
mod_score_frame$thresh==thresholds[t]),
median)[,2]
tmp <- subset(mod_score_frame, mod_score_frame$thresh == thresholds[t])
for (i in conditions)
{
cond_tmp <- matrix(tmp$modularity, ncol = length(conditions))[,i]
tmp_means <- tapply(tmp$modularity, tmp$subject, mean)
num <- sd(cond_tmp - tmp_means)
er <- num / denom
error_vec <- c(error_vec, er)
}
}
error_vec_mat = matrix(error_vec, nrow = length(conditions), byrow = T)
attach(mod_score_frame)
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.11 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "n modules")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = aa + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
dat5
shapiro.test(stack(dat5)[,1])
wilcox.test(dat5[,1], dat5[,2])
wilcox.test(dat5[,1], dat5[,2], paired=T)
wilcox.test(dat10[,1], dat10[,2], paired=T)
wilcox.test(dat15[,1], dat15[,2], paired=T)
wilcox.test(dat20[,1], dat20[,2], paired=T)
source('~/Documents/workspace/hel-con/plotting_max_q_bar_graphs_mediansofmax.R', echo=TRUE)
