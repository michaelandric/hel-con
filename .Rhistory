ks.test((rnorm(36, mean=.26, .03)), stack(dat20)[,1])
ks.test((rnorm(36, mean=.26, .03)), stack(dat20)[,1])
ks.test((rnorm(36, mean=.26, .03)), stack(dat20*4)[,1])
ks.test((rnorm(36, mean=.26, .03)), stack(dat20*4)[,1])
hist(stack(dat20)[,1])
hist(stack(dat5)[,1])
hist(stack(dat10)[,1])
hist(stack(dat15)[,1])
hist(stack(dat20)[,1])
mod_score_frame
error_vec <- c()
medians_mat <- matrix(nrow = length(thresholds), ncol = length(conditions))
for (t in 1:length(thresholds))
{
medians_mat[t,] <- tapply(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh==thresholds[t]), median)[,2]   # This re-orders to "A, B, C, D" rather than "A, B, D, C"
tmp <- subset(mod_score_frame, mod_score_frame$thresh == thresholds[t])
for (i in conditions)
{
er <- sd(matrix(tmp$modularity, ncol = 4)[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(length(subjects)))
error_vec <- c(error_vec, er)
}
}
error_vec_mat = matrix(error_vec, nrow = length(conditions), byrow = T)
medians_mat
apply(dat20, 2, median)
apply(dat15, 2, median)
apply(dat10, 2, median)
apply(dat5, 2, median)
shapiro.test(stack(dat5)[,1])
shapiro.test(stack(dat10)[,1])
shapiro.test(stack(dat15)[,1])
shapiro.test(stack(dat20)[,1])
shapiro.test(stack(dat20)[,1])
summary(dat5)
mod_score_frame
aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), median)
aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), median)
medians_mat
aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), mean)
matrix(aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), mean)$x, nrow=4)
matrix(aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), mean)$x, nrow=4, byrow=T)
medians_mat
matrix(aggregate(mod_score_frame$modularity, list(mod_score_frame$condition, mod_score_frame$thresh), median)$x, nrow=4, byrow=T)
error_vec
attach(mod_score_frame)
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 2, rev))
ylim <- c(0, 1.01 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
aa
apply(medians_mat, 2, rev)
t(apply(medians_mat, 2, rev))
t(apply(medians_mat, 2, rev)) + aa
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 2, rev))
ylim <- c(0, 1.01 * max(aa + trans_errs))
trans_errs
trans_medians
error_vec_mat
error_vec
trans_errs <- apply(error_vec_mat, 2, rev)
ylim <- c(0, 1.01 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = trans_medians + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
error_vec
tmp
tapply(tmp$modularity, tmp$subject, mean)
sd(matrix(tmp$modularity, ncol = 4)[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(length(subjects)))
error_vec
tmp$modularity
matrix(tmp$modularity, ncol=4)
matrix(tmp$modularity, ncol=2)
matrix(tmp$modularity, ncol=2)[,i]
sd(matrix(tmp$modularity, ncol = 2)[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(length(subjects)))
matrix(tmp$modularity, ncol = 2)
matrix(tmp$modularity, ncol = 2)[,i]
matrix(tmp$modularity, ncol = 2)[,i] - tapply(tmp$modularity, tmp$subject, mean)
length(subjects)
sd(matrix(tmp$modularity, ncol = 2)[,i] - tapply(tmp$modularity, tmp$subject, mean))
sd(matrix(tmp$modularity, ncol = 2)[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(18))
er
matrix(tmp$modularity, ncol = 2)[,i]
tmp
matrix(tmp$modularity, ncol=2)
matrix(tmp$modularity, ncol=2)
er
tapply(tmp$modularity, tmp$subject, mean)
cond_tmp <- matrix(tmp$modularity, ncol = length(conditions))[,i]
tmp_means <- tapply(tmp$modularity, tmp$subject, mean)
num <- sd(cond_tmp - tmp_means)
den <- sqrt(length(subjects))
num / den
er
er <- sd(matrix(tmp$modularity, ncol = length(conditions))[,i] - tapply(tmp$modularity, tmp$subject, mean)) / (sqrt(length(subjects)))
er
error_vec <- c()
medians_mat <- matrix(nrow = length(thresholds), ncol = length(conditions))
denom <- sqrt(length(subjects))
for (t in 1:length(thresholds))
{
medians_mat[t,] <- tapply(mod_score_frame$modularity,
list(mod_score_frame$condition,
mod_score_frame$thresh==thresholds[t]),
median)[,2]
tmp <- subset(mod_score_frame, mod_score_frame$thresh == thresholds[t])
for (i in conditions)
{
cond_tmp <- matrix(tmp$modularity, ncol = length(conditions))[,i]
tmp_means <- tapply(tmp$modularity, tmp$subject, mean)
num <- sd(cond_tmp - tmp_means)
er <- num / denom
error_vec <- c(error_vec, er)
}
}
error_vec_mat = matrix(error_vec, nrow = length(conditions), byrow = T)
error_vec_mat
t(apply(error_vec_mat, 2, rev))
t(apply(medians_mat, 2, rev))
t(apply(error_vec_mat, 1, rev))
error_vec
medians_mat
aa
error_vec
error_vec_mat
trans_errs
t(apply(error_vec_mat, 2, rev))
t(apply(error_vec_mat, 1, rev))
error_vec_mat
apply(t(error_vec_mat), 1, rev))
apply(t(error_vec_mat), 1, rev)
apply(t(error_vec_mat), 2, rev)
error_vec
apply(error_vec_mat, 2, rev)
aa
apply(error_vec_mat, 1, rev)
t(apply(error_vec_mat, 1, rev))
aa
attach(mod_score_frame)
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 1, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- apply(error_vec_mat, 1, rev)
ylim <- c(0, 1.01 * max(aa + trans_errs))
trans_errs
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 1, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.01 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = trans_medians + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
trans_medians
medians_mat
aa
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = aa + trans_errs)
trans_medians
t(apply(medians_mat, 1, rev))
t(apply(medians_mat, 2, rev))
aa
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.01 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = aa + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
error_vec_mat
error_vec
medians_mat
trans_medians
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.11 * max(aa + trans_errs))
#pdf('max_q_values_barplot_mediansofmax.pdf')
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "Modularity (Q)")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = aa + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
aa
dat5 <- read.table('max_q_n_mods_density0.05_array.txt')
dat10 <- read.table('max_q_n_mods_density0.1_array.txt')
dat15 <- read.table('max_q_n_mods_density0.15_array.txt')
dat20 <- read.table('max_q_n_mods_density0.2_array.txt')
dat <- rbind(stack(dat20), stack(dat15), stack(dat10), stack(dat5))$values
condition_vec <- rep(rep(condition_names, each=length(subjects)), length(thresholds))
subjects_vec <- rep(rep(subjects, length(conditions)), length(thresholds))
thresh_levels <- as.factor(rep(thresholds, each = length(subjects) * length(conditions)))
mod_score_frame <- tbl_df(data.frame(dat, condition_vec, subjects_vec, thresh_levels))
colnames(mod_score_frame) <- c("modularity", "condition", "subject", "thresh")
error_vec <- c()
medians_mat <- matrix(nrow = length(thresholds), ncol = length(conditions))
denom <- sqrt(length(subjects))
for (t in 1:length(thresholds))
{
medians_mat[t,] <- tapply(mod_score_frame$modularity,
list(mod_score_frame$condition,
mod_score_frame$thresh==thresholds[t]),
median)[,2]
tmp <- subset(mod_score_frame, mod_score_frame$thresh == thresholds[t])
for (i in conditions)
{
cond_tmp <- matrix(tmp$modularity, ncol = length(conditions))[,i]
tmp_means <- tapply(tmp$modularity, tmp$subject, mean)
num <- sd(cond_tmp - tmp_means)
er <- num / denom
error_vec <- c(error_vec, er)
}
}
error_vec_mat = matrix(error_vec, nrow = length(conditions), byrow = T)
attach(mod_score_frame)
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.11 * max(aa + trans_errs))
ab = barplot(aa, beside = TRUE, ylim = ylim, ylab = "n modules")
segments(x0 = ab, x1 = ab, y0 = trans_medians, y1 = aa + trans_errs)
segments(x0 = ab - .2, x1 = ab + .2, y0 = trans_medians + trans_errs, y1 = trans_medians + trans_errs)
dat5
shapiro.test(stack(dat5)[,1])
wilcox.test(dat5[,1], dat5[,2])
wilcox.test(dat5[,1], dat5[,2], paired=T)
wilcox.test(dat10[,1], dat10[,2], paired=T)
wilcox.test(dat15[,1], dat15[,2], paired=T)
wilcox.test(dat20[,1], dat20[,2], paired=T)
source('~/Documents/workspace/hel-con/plotting_max_q_bar_graphs_mediansofmax.R', echo=TRUE)
source('~/Documents/workspace/hel-con/plotting_max_q_bar_graphs_mediansofmax.R', echo=TRUE)
ls()
mod_score_frame
cond_tmp
tmp
matrix(tmp$modularity, ncol = length(conditions))[,i]
matrix(tmp$modularity, ncol = length(conditions))
matrix(tmp$modularity, ncol = length(conditions))[,1] - rowMeans(matrix(tmp$modularity, ncol = length(conditions)))
sd(matrix(tmp$modularity, ncol = length(conditions))[,1] - rowMeans(matrix(tmp$modularity, ncol = length(conditions))))
sd(matrix(tmp$modularity, ncol = length(conditions))[,2] - rowMeans(matrix(tmp$modularity, ncol = length(conditions))))
tmp_means
rowMeans(matrix(tmp$modularity, ncol = length(conditions)))
sd(cond_tmp - tmp_means)
cond_tmp
matrix(tmp$modularity, ncol = length(conditions))[,2]
sd9matrix(tmp$modularity, ncol = length(conditions))[,2] - tmp_means)
sd(matrix(tmp$modularity, ncol = length(conditions))[,2] - tmp_means)
tmp_means <- rowMeans(matrix(tmp$modularity, ncol = length(conditions)))
sd(cond_tmp - tmp_means)
sd(cond_tmp - tmp_means) / denom
tmp_means <- tapply(tmp$modularity, tmp$subject, mean)
sd(cond_tmp - tmp_means) / denom
tapply(tmp$modularity, tmp$subject, mean)
rowMeans(matrix(tmp$modularity, ncol = length(conditions)))
tmp
t
thresholds[t]
filter(mod_score_frame, thresh==thresholds[t])
filter(mod_score_frame, thresh==thresholds[t] & condition==i)
i
conditions
filter(mod_score_frame, thresh==thresholds[t])
tmp
cond_tmp
condition_names
filter(tmp, condition==condition_names[i])
filter(tmp, condition==condition_names[i])$modularity
matrix(tmp$modularity, ncol = length(conditions))[,i]
tmp_means <- rowMeans(matrix(tmp$modularity, ncol = length(conditions)))
matrix(tmp$modularity, ncol = length(conditions))
tmp
tmp_mat <- matrix(tmp$modularity, ncol = length(conditions))
cond_tmp
tmp_mat[,i]
rowMeans(matrix(tmp$modularity, ncol = length(conditions)))
rowMeans(tmp_mat)
source('~/Documents/workspace/hel-con/plotting_max_q_bar_graphs_mediansofmax.R', echo=TRUE)
sd(cond_tmp)
(sd(cond_tmp)) / denom
sd(cond_tmp) / denom
source('~/Documents/workspace/hel-con/plotting_max_q_bar_graphs_mediansofmax.R', echo=TRUE)
tmp_mat
shapiro.test(tmp_mat[,1])
shapiro.test(tmp_mat[,2])
hist(c(tmp_mat))
wilcox.test(tmp_mat[,1], tmp_mat[,2])
sd(cond_tmp)
mad(cond_tmp)
mad(cond_tmp) / denom
sd(cond_tmp) / denom
?mad
sd(cond_tmp) * 1.253
(sd(cond_tmp) * 1.253) / denom
wilcox.test(tmp_mat[,1], tmp_mat[,2])
wilcox.test(tmp_mat[,1], tmp_mat[,2], paired=TRUE)
t.test(tmp_mat[,1], tmp_mat[,2], paired=TRUE)
source('~/Documents/workspace/hel-con/plotting_max_q_bar_graphs_mediansofmax.R', echo=TRUE)
dat5 <- read.table('max_q_values_density0.05_array.txt')
dat10 <- read.table('max_q_values_density0.1_array.txt')
dat15 <- read.table('max_q_values_density0.15_array.txt')
dat20 <- read.table('max_q_values_density0.2_array.txt')
dat <- rbind(stack(dat20), stack(dat15), stack(dat10), stack(dat5))$values
condition_vec <- rep(rep(condition_names, each=length(subjects)), length(thresholds))
subjects_vec <- rep(rep(subjects, length(conditions)), length(thresholds))
thresh_levels <- as.factor(rep(thresholds, each = length(subjects) * length(conditions)))
mod_score_frame <- tbl_df(data.frame(dat, condition_vec, subjects_vec, thresh_levels))
colnames(mod_score_frame) <- c("modularity", "condition", "subject", "thresh")
error_vec <- c()
medians_mat <- matrix(nrow = length(thresholds), ncol = length(conditions))
denom <- sqrt(length(subjects))
for (t in 1:length(thresholds))
{
medians_mat[t,] <- tapply(mod_score_frame$modularity,
list(mod_score_frame$condition,
mod_score_frame$thresh==thresholds[t]),
median)[,2]
tmp <- subset(mod_score_frame, mod_score_frame$thresh == thresholds[t])
tmp_mat <- matrix(tmp$modularity, ncol = length(conditions))
tmp_means <- rowMeans(tmp_mat)
for (i in conditions)
{
cond_tmp <- tmp_mat[,i]
er <- sd(cond_tmp) / denom
error_vec <- c(error_vec, er)
}
}
error_vec_mat = matrix(error_vec, nrow = length(conditions), byrow = T)
attach(mod_score_frame)
aa <- tapply(modularity, list(condition, thresh), median)
trans_medians <- t(apply(medians_mat, 2, rev))
# trans_errs <- t(apply(error_vec_mat, 2, rev))
trans_errs <- t(apply(error_vec_mat, 1, rev))
ylim <- c(0, 1.11 * max(aa + trans_errs))
mod_score_frame
tmp_means
filter(mod_score_frame, thresh=='20')$modularity
shapiro.test(filter(mod_score_frame, thresh=='20')$modularity)
shapiro.test(filter(mod_score_frame, thresh=='15')$modularity)
shapiro.test(filter(mod_score_frame, thresh=='10')$modularity)
shapiro.test(filter(mod_score_frame, thresh=='05')$modularity)
shapiro.test(filter(mod_score_frame, thresh=='5')$modularity)
hist(filter(mod_score_frame, thresh=='5')$modularity)
hist(filter(mod_score_frame, thresh=='10')$modularity)
hist(filter(mod_score_frame, thresh=='15')$modularity)
hist(filter(mod_score_frame, thresh=='20')$modularity)
filter(mod_score_frame, thresh=='20')$modularity
filter(mod_score_frame, thresh=='20')
matrix(filter(mod_score_frame, thresh=='20'), ncol=2)
matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)
wilcox.test(c(matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)))
wilcox.test(matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2))
wilcox.test(matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,2])
wilcox.test(matrix(filter(mod_score_frame, thresh=='15')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,2])
wilcox.test(matrix(filter(mod_score_frame, thresh=='15')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,2], paired=T)
wilcox.test(matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,2], paired=T)
wilcox.test(matrix(filter(mod_score_frame, thresh=='10')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,2], paired=T)
wilcox.test(matrix(filter(mod_score_frame, thresh=='05')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,2], paired=T)
wilcox.test(matrix(filter(mod_score_frame, thresh=='5')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='20')$modularity, ncol=2)[,2], paired=T)
tmp_means
tmp_mat
wilcox.test(tmp_mat[,1], tmp_mat[,2], paired=T)
wilcox.test(matrix(filter(mod_score_frame, thresh=='5')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='5')$modularity, ncol=2)[,2], paired=T)
wilcox.test(matrix(filter(mod_score_frame, thresh=='15')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='15')$modularity, ncol=2)[,2], paired=T)
wilcox.test(matrix(filter(mod_score_frame, thresh=='10')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='10')$modularity, ncol=2)[,2], paired=T)
wilcox.test(matrix(filter(mod_score_frame, thresh=='5')$modularity, ncol=2)[,1], matrix(filter(mod_score_frame, thresh=='5')$modularity, ncol=2)[,2], paired=T)
?barplot
?barplot2
library(gplot)
?col
?colo
?color
?colors
colors
colors()
?barplot
setwd('..')
dat_matA <- read.table('dat_matA_Truncpshape.txt')
dat_matB <- read.table('dat_matB_expcutoff.txt')
dat_matG <- read.table('dat_matG_pwrlaw.txt')
qqnorm(dat_matA)
?qqnorm
qqnorm(c(dat_matA))
qqplot(c(dat_matA))
qqplot(dat_matA)
dat_matA
dat_matA
c(dat_matA)
c(as.matrix(dat_matA))
dat_matA <- as.matrix(read.table('dat_matA_Truncpshape.txt'))
dat_matA
c(dat_matA)
dat_matB <- as.matrix(read.table('dat_matB_expcutoff.txt'))
dat_matG <- as.matrix(read.table('dat_matG_pwrlaw.txt'))
qqplot(c(dat_matA))
qqplot(length(c(dat_matA)),c(dat_matA))
qqplot(1:length(c(dat_matA)),c(dat_matA))
qqplot(1:length(c(dat_matB)),c(dat_matB))
qqplot(1:length(c(dat_matG)),c(dat_matG))
?qqplot
?rt
?qqplot
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
qqplot(y, rt(300, df = 5))
?qqplot
qqnorm(c(dat_matA))
?qqnorm
qqnorm(rnorm(36))
qqnorm(rnorm(36))
qqnorm(rnorm(36))
qqnorm(c(dat_matA))
qqnorm(c(dat_matB))
qqnorm(c(dat_matG))
qqline(c(dat_matG))
qqnorm(c(dat_matB))
qqline(c(dat_matB))
qqnorm(c(dat_matA))
qqline(c(dat_matA))
wilcox.test(dat_matA[,1], dat_matA[,2], paired=TRUE)
wilcox.test(dat_matB[,1], dat_matB[,2], paired=TRUE)
wilcox.test(dat_matG[,1], dat_matG[,2], paired=TRUE)
hist(dat_matG[,1])
hist(dat_matG[,2])
plot(dat_matG[,1])
plot(dat_matG[,2], pch=3)
plot(dat_matG[,1])
points(dat_matG[,2], pch=3)
plot(dat_matA[,1], pch=2, cex=3)
plot(dat_matA[,1], pch=15)
plot(dat_matA[,2], pch=16, col='red')
plot(dat_matA[,1], pch=15)
points(dat_matA[,2], pch=16, col='red')
dat_matA
apply(dat_matA, 2, median)
apply(dat_matB, 2, median)
wilcox.test(dat_matB[,1], dat_matB[,2], paired=T)
wilcox.test(dat_matG[,1], dat_matG[,2], paired=T)
apply(dat_matG, 2, median)
apply(dat_matG, 2, min)
apply(dat_matG, 2, max)
apply(dat_matA, 2, min)
apply(dat_matA, 2, median)
apply(dat_matB, 2, median)
apply(dat_matG, 2, median)
apply(dat_matG, 2, sd)
hist(dat_matG[,1])
hist(dat_matG[,1], breaks=10)
hist(dat_matG[,1], breaks=15)
hist(c(dat_matG), breaks=15)
hist(c(dat_matG), breaks=10)
wilcox.test(dat_matG[,1], dat_matG[,2], paired=T)
t.test(dat_matG[,1], dat_matG[,2], paired=T)
wilcox.test(dat_matB[,1], dat_matB[,2], paired=T)
t.test(dat_matB[,1], dat_matB[,2], paired=T)
wilcox.test(dat_matA[,1], dat_matA[,2], paired=T)
t.test(dat_matA[,1], dat_matA[,2], paired=T)
hist(dat_matA[,1])
apply(dat_matA, 2, mean)
apply(dat_matA, 2, median)
shapiro.test(c(dat_matA))
shapiro.test(c(dat_matA))
shapiro.test(c(dat_matA))
hist(c(dat_matA))
mean(c(dat_matA))
sd(c(dat_matA))
setwd('~/Documents/workspace/hel/group_similarity/')
library(dplyr)
library(ggplot2)
td = .05
within1 <- read.table(paste('within_session1_dens_',td,'_nmi.txt', sep=''))$V1
within2 <- read.table(paste('within_session2_dens_',td,'_nmi.txt', sep=''))$V1
between <- read.table(paste('between_dens_',td,'_nmi.txt', sep=''))$V1
repnames <- c(rep("sess_1", length(within1)), rep("sess_2", length(within2)), rep("between", length(between)))
nm_df <- tbl_df(data.frame(c(within1, within2, between), repnames))
names(nm_df) <- c('NMI', 'Group')
print(qplot(NMI, data = nm_df, geom="density", fill=Group, alpha=I(.66), xlim=c(0,1), main=paste("Density ",td*100,"%", sep=""), xlab="Normalized Mutual Information") + theme(panel.background = element_rect(fill="white")) + theme_bw())
setwd('~/Documents/workspace/hel/group_similarity/')
library(dplyr)
library(ggplot2)
pdf('plotting_similarity_nmi.pdf')
for (td in seq(.05, .2, .05))
{
within1 <- read.table(paste('within_session1_dens_',td,'_nmi.txt', sep=''))$V1
within2 <- read.table(paste('within_session2_dens_',td,'_nmi.txt', sep=''))$V1
between <- read.table(paste('between_dens_',td,'_nmi.txt', sep=''))$V1
repnames <- c(rep("sess_1", length(within1)), rep("sess_2", length(within2)), rep("between", length(between)))
nm_df <- tbl_df(data.frame(c(within1, within2, between), repnames))
names(nm_df) <- c('NMI', 'Group')
print(qplot(NMI, data = nm_df, geom="density", fill=Group, alpha=I(.66), xlim=c(0,1), main=paste("Density ",td*100,"%", sep=""), xlab="Normalized Mutual Information") + theme(panel.background = element_rect(fill="white")) + theme_bw())
}
dev.off()
matrix(rnorm(12), ncol=4)
apply(matrix(rnorm(12), ncol=4), 2, median)
apply(matrix(rnorm(12), ncol=4), 1, median)
cbind(c(seq3), apply(matrix(rnorm(12), ncol=4), 1, median))
cbind(c(seq(3), apply(matrix(rnorm(12), ncol=4), 1, median))
)
rbind(c(seq(3), apply(matrix(rnorm(12), ncol=4), 1, median))
)
seq(3)
apply(matrix(rnorm(12), ncol=4), 1, median)
rbind(seq(3), apply(matrix(rnorm(12), ncol=4), 1, median))
cbind(seq(3), apply(matrix(rnorm(12), ncol=4), 1, median))
seq(12)
seq(0, (12-1))
seq(0, 12-1)
2566 - 730
2566 - 730 - 150
2566 - 730 - 150 - 66
2566 - 730 - 150 - 66 - 1200
